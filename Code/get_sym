#!/usr/bin/env python

import os
from ase.io import *
import sys

alphas = '_ABCDEFGHIJKLMNOPQRSTUVWXYZ'

findsym_bin = os.getenv('ISODATA')+'/findsym'


def find_symmetry(atoms, accuracy):
        #Set title
        in_string = 'Input generated by ASE\n'

        #Set accuracy
        in_string += '{0}\t Symmetry search accuracy\n'.format(accuracy)
        
        #Write lattice parameters
        in_string += '1\tLattice parameters entered as vectors\n'
        for v in atoms.get_cell():
                in_string += '{0:.6f}  {1:.6f}  {2:.6f}\n'.format(*v)
                
        
        #Write unit cell
        in_string += '1\tJust identity matrix\n'
        in_string += '1  0  0\n0  1  0\n0  0  1\n'
        
        #Write atoms
        in_string += '{0}\tNumer of atoms\n'.format(len(atoms))
        
        #Sort out atoms by kind
        kind_count = 1
        
        #Map symbols to integers
        kind_map = {}
        
        #Map integers to symbols
        kind_map_inv = {}
        
        for s in atoms.get_chemical_symbols():
                if not kind_map.has_key(s):
                        kind_map[s] = kind_count
                        kind_map_inv[kind_count] = s
                        kind_count += 1
        
        #Write out atom kinds in a row
        for atom in atoms:
                in_string += '{0} '.format(kind_map[atom.symbol])
        
        in_string += '\tAtom kinds\n'
        
        #Write atomic positions
        for spos in atoms.get_scaled_positions():
                in_string += '{0:.6f}  {1:.6f}  {2:.6f}\n'.format(*spos)
                
        
        #Call findsym
        output = os.popen("echo '{0}' | {1}".format(in_string, findsym_bin)).readlines()
        
        if 'bombed' in ''.join(output):
                return None
        
        #Replace generic atom markings (A, B, C...) produced by findsym
        #by actual chemical symbols
        for i in range(output.index('_atom_site_occupancy\n')+1, len(output)-1):
                #Get atom position line
                line = output[i].strip().split()
                
                #Get atom mark assigned by findsym
                mark = line[0][0]
                
                #Get number of the atom assigned by findsym
                number = line[0][1:]
                
                #Get actual symbol of the atom
                symbol = kind_map_inv[alphas.index(mark)]
                
                tb='   '
                nl = '\n'
                
                #Make necessary changes
                newline = symbol+number+tb+symbol+tb+line[2]+tb+line[3]+tb+line[4]+tb+line[5]+nl

                output[i] = newline
        
        
        #Get CIF file string generated by findsym
        cif_file_str = ''.join([line for line in output[output.index('# CIF file\n'): ]])

        return cif_file_str
        

atoms = read(sys.argv[1])

accuracy = float(sys.argv[2])

ret = find_symmetry(atoms, accuracy)

if ret != None:
        print ret
else:
        print 'FINDSYM has bombed'
        

                
                




